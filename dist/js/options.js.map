{"version":3,"file":"js/options.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAQA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;AAAA;AA4BA;AAAA;AA5BA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAkCA;AAAA;AAlCA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;ACtTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEhDA;AACA;AACA;AACA;AACA","sources":["webpack://chrome_extension/./src/js/options.js","webpack://chrome_extension/webpack/bootstrap","webpack://chrome_extension/webpack/runtime/chunk loaded","webpack://chrome_extension/webpack/runtime/compat get default export","webpack://chrome_extension/webpack/runtime/define property getters","webpack://chrome_extension/webpack/runtime/hasOwnProperty shorthand","webpack://chrome_extension/webpack/runtime/make namespace object","webpack://chrome_extension/webpack/runtime/jsonp chunk loading","webpack://chrome_extension/webpack/before-startup","webpack://chrome_extension/webpack/startup","webpack://chrome_extension/webpack/after-startup"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n    const form = document.getElementById('optionsForm');\n    const apiKeyInput = document.getElementById('apiKey');\n    const deepseekApiKeyInput = document.getElementById('deepseekApiKey');\n    const saveBtn = document.getElementById('saveBtn');\n    const testGeminiApiBtn = document.getElementById('testGeminiApiBtn');\n    const testDeepseekApiBtn = document.getElementById('testDeepseekApiBtn');\n    const statusMessage = document.getElementById('statusMessage');\n    const knowledgeLevel = document.getElementById('knowledgeLevel');\n    const aiOptions = document.querySelectorAll('.ai-option');\n    const selectedAIInput = document.getElementById('selectedAI');\n    const geminiFields = document.querySelector('.gemini-fields');\n    const deepseekFields = document.querySelector('.deepseek-fields');\n    const testButtons = document.getElementById('testButtons');\n    const geminiIcon = document.getElementById('gemini-icon');\n    const deepseekIcon = document.getElementById('deepseek-icon');\n\n\n\n    const setFallbackIcon = (imgElement, color) => {\n        imgElement.onerror = null; // Prevent infinite loop if fallback fails\n        imgElement.src = `data:image/svg+xml;base64,${btoa(\n            `<svg width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                <text x=\"12\" y=\"16\" font-size=\"10\" text-anchor=\"middle\" fill=\"white\">\n                    ${color === '#4285F4' ? 'G' : 'D'}\n                </text>\n            </svg>`\n        )}`;\n    };\n\n    geminiIcon.onerror = () => setFallbackIcon(geminiIcon, '#4285F4');\n    deepseekIcon.onerror = () => setFallbackIcon(deepseekIcon, '#00A67E');\n\n    try {\n        geminiIcon.src = chrome.runtime.getURL('images/gemini-icon.png');\n        deepseekIcon.src = chrome.runtime.getURL('images/deepseek-icon.png');\n    } catch (error) {\n        console.error('Error loading extension images:', error);\n        \n        setFallbackIcon(geminiIcon, '#4285F4');\n        setFallbackIcon(deepseekIcon, '#00A67E');\n    }\n\n\n    aiOptions.forEach(option => {\n        option.addEventListener('click', function() {\n            // Update UI\n            aiOptions.forEach(opt => opt.classList.remove('selected'));\n            this.classList.add('selected');\n            \n            // Update hidden input\n            const selectedAI = this.dataset.ai;\n            selectedAIInput.value = selectedAI;\n            \n            // Toggle fields visibility\n            if (selectedAI === 'gemini') {\n                geminiFields.classList.add('active');\n                deepseekFields.classList.remove('active');\n                testButtons.classList.add('active');\n                testGeminiApiBtn.style.display = 'block';\n                testDeepseekApiBtn.style.display = 'none';\n            } else {\n                geminiFields.classList.remove('active');\n                deepseekFields.classList.add('active');\n                testButtons.classList.add('active');\n                testGeminiApiBtn.style.display = 'none';\n                testDeepseekApiBtn.style.display = 'block';\n            }\n        });\n    });\n\n\n    document.querySelector('.ai-option[data-ai=\"gemini\"]').click();\n    \n    // Initialize AI selection\n    function initAISelection() {\n        aiOptions.forEach(option => {\n            option.addEventListener('click', function() {\n                // Update UI\n                aiOptions.forEach(opt => opt.classList.remove('selected'));\n                this.classList.add('selected');\n                \n                // Update hidden input\n                const selectedAI = this.dataset.ai;\n                selectedAIInput.value = selectedAI;\n                \n                // Show appropriate fields and test buttons\n                if (selectedAI === 'gemini') {\n                    geminiFields.classList.add('active');\n                    deepseekFields.classList.remove('active');\n                    testButtons.classList.add('active');\n                    testGeminiApiBtn.style.display = 'block';\n                    testDeepseekApiBtn.style.display = 'none';\n                } else {\n                    geminiFields.classList.remove('active');\n                    deepseekFields.classList.add('active');\n                    testButtons.classList.add('active');\n                    testGeminiApiBtn.style.display = 'none';\n                    testDeepseekApiBtn.style.display = 'block';\n                }\n            });\n        });\n    }\n\n    // 1. Load saved settings when options page opens\n    function loadSettings() {\n        chrome.storage.sync.get(['apiKey', 'deepseekApiKey', 'knowledgeLevel', 'selectedAI'], (result) => {\n            if (result.apiKey) {\n                apiKeyInput.value = result.apiKey;\n            }\n            if (result.deepseekApiKey) {\n                deepseekApiKeyInput.value = result.deepseekApiKey;\n            }\n            if (result.knowledgeLevel) {\n                knowledgeLevel.value = result.knowledgeLevel;\n            }\n            if (result.selectedAI) {\n                selectedAIInput.value = result.selectedAI;\n                // Trigger click on the selected AI option\n                document.querySelector(`.ai-option[data-ai=\"${result.selectedAI}\"]`).click();\n            } else {\n                // Default to Gemini\n                document.querySelector('.ai-option[data-ai=\"gemini\"]').click();\n            }\n            \n            showStatus('Settings loaded', 'success');\n        });\n    }\n\n    // 2. Save settings to storage\n    form.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        \n        const selectedAI = selectedAIInput.value;\n        const apiKey = selectedAI === 'gemini' ? apiKeyInput.value.trim() : deepseekApiKeyInput.value.trim();\n        const selectedKnowledgeLevel = knowledgeLevel.value;\n        \n        if (!apiKey) {\n            showStatus(`${selectedAI === 'gemini' ? 'Gemini' : 'DeepSeek'} API key cannot be empty`, 'error');\n            return;\n        }\n\n        saveBtn.textContent = 'Saving...';\n        saveBtn.disabled = true;\n\n        try {\n            const settingsToSave = {\n                knowledgeLevel: selectedKnowledgeLevel,\n                selectedAI: selectedAI\n            };\n\n            // Only save the relevant API key\n            if (selectedAI === 'gemini') {\n                settingsToSave.apiKey = apiKey;\n                // Clear DeepSeek key if switching from DeepSeek to Gemini\n                settingsToSave.deepseekApiKey = '';\n            } else {\n                settingsToSave.deepseekApiKey = apiKey;\n                // Clear Gemini key if switching from Gemini to DeepSeek\n                settingsToSave.apiKey = '';\n            }\n\n            await chrome.storage.sync.set(settingsToSave);\n            showStatus('Settings saved successfully!', 'success');\n            saveBtn.textContent = 'Saved!';\n        } catch (error) {\n            showStatus(`Failed to save: ${error.message}`, 'error');\n            saveBtn.textContent = 'Save Failed';\n            console.error('Storage error:', error);\n        } finally {\n            setTimeout(() => {\n                saveBtn.textContent = 'Save Settings';\n                saveBtn.disabled = false;\n            }, 2000);\n        }\n    });\n\n    // 3. Test Gemini API connection\n    testGeminiApiBtn.addEventListener('click', async () => {\n        const apiKey = apiKeyInput.value.trim();\n        \n        if (!apiKey) {\n            showStatus('Please enter a Gemini API key first', 'error');\n            apiKeyInput.focus();\n            return;\n        }\n\n        testGeminiApiBtn.textContent = 'Testing Gemini...';\n        testGeminiApiBtn.disabled = true;\n\n        try {\n            const responseText = await testGeminiApi(apiKey);\n            showStatus('✅ Gemini API key is valid! Response: ' + responseText, 'success');\n        } catch (error) {\n            showStatus(`❌ Gemini API Error: ${error.message}`, 'error');\n            console.error('Gemini API test error:', error);\n        } finally {\n            testGeminiApiBtn.textContent = 'Test Gemini API';\n            testGeminiApiBtn.disabled = false;\n        }\n    });\n\n    // 4. Test DeepSeek API connection\n    testDeepseekApiBtn.addEventListener('click', async () => {\n        const apiKey = deepseekApiKeyInput.value.trim();\n        \n        if (!apiKey) {\n            showStatus('Please enter a DeepSeek API key first', 'error');\n            deepseekApiKeyInput.focus();\n            return;\n        }\n\n        testDeepseekApiBtn.textContent = 'Testing DeepSeek...';\n        testDeepseekApiBtn.disabled = true;\n\n        try {\n            const responseText = await testDeepseekApi(apiKey);\n            showStatus('✅ DeepSeek API key is valid! Response: ' + responseText, 'success');\n        } catch (error) {\n            showStatus(`❌ DeepSeek API Error: ${error.message}`, 'error');\n            console.error('DeepSeek API test error:', error);\n        } finally {\n            testDeepseekApiBtn.textContent = 'Test DeepSeek API';\n            testDeepseekApiBtn.disabled = false;\n        }\n    });\n\n    // Gemini API test function\n    async function testGeminiApi(apiKey) {\n        const prompt = 'Explain how AI works in one sentence';\n        const model = 'gemini-1.5-flash';\n        \n        const response = await fetch(\n            `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    contents: [{\n                        parts: [{ text: prompt }]\n                    }]\n                })\n            }\n        );\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error?.message || `HTTP ${response.status}`);\n        }\n\n        const data = await response.json();\n        return data.candidates[0].content.parts[0].text;\n    }\n\n    // DeepSeek API test function\n    async function testDeepseekApi(apiKey) {\n        const prompt = 'Explain how AI works in one sentence';\n        \n        const response = await fetch(\n            'https://api.deepseek.com/v1/chat/completions',\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${apiKey}`\n                },\n                body: JSON.stringify({\n                    model: 'deepseek-chat',\n                    messages: [\n                        {\n                            role: 'user',\n                            content: prompt\n                        }\n                    ],\n                    temperature: 0.7,\n                    max_tokens: 100\n                })\n            }\n        );\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error?.message || `HTTP ${response.status}`);\n        }\n\n        const data = await response.json();\n        return data.choices[0].message.content;\n    }\n\n    // Status message helper\n    function showStatus(message, type) {\n        statusMessage.textContent = message;\n        statusMessage.className = `status-message ${type}`;\n        statusMessage.style.display = 'block';\n        statusMessage.style.opacity = '1';\n        \n        setTimeout(() => {\n            statusMessage.style.opacity = '0';\n            setTimeout(() => {\n                statusMessage.style.display = 'none';\n            }, 500);\n        }, 5000);\n    }\n\n    // Initialize the page\n    initAISelection();\n    loadSettings();\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"options\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkchrome_extension\"] = self[\"webpackChunkchrome_extension\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_babel_runtime_regenerator_index_js-node_modules_babel_runtime_helpers_es-58772e\"], () => (__webpack_require__(\"./src/js/options.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}